// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  describe('ChActionOp', function() {
    var $ch, $httpBackend, $pm, AC, ChActionOp, EP, PC;
    $ch = null;
    $httpBackend = null;
    ChActionOp = null;
    $pm = null;
    EP = 'http://pm.mpx.dev/v20140601/context/entry_point';
    PC = 'http://pm.mpx.dev/v20140601/context/product';
    AC = 'http://pm.mpx.dev/v20140601/context/affiliation';
    beforeEach(function() {
      return angular.mock.module("chinchilla");
    });
    beforeEach(function() {
      return angular.mock.module(function($chProvider) {
        $chProvider.setEntryPoint('pm', EP);
        return null;
      });
    });
    afterEach(function() {
      $httpBackend.verifyNoOutstandingExpectation();
      return $httpBackend.verifyNoOutstandingRequest();
    });
    beforeEach(function() {
      return inject(function($injector) {
        var entryPointContext, productContext;
        $ch = $injector.get('$ch');
        $httpBackend = $injector.get('$httpBackend');
        ChActionOp = $injector.get('ChActionOp');
        entryPointContext = loadFixture('pm.context.entry_point');
        productContext = loadFixture('pm.context.product');
        $httpBackend.whenGET(EP).respond(entryPointContext);
        $httpBackend.whenGET(PC).respond(productContext);
        $httpBackend.whenGET(AC).respond({});
        $httpBackend.whenGET('http://pm.mpx.dev/v20140601/products').respond({});
        return $pm = $ch('pm');
      });
    });
    it('gets an action operation', function() {
      var operation;
      operation = $pm.$('products').$$('query');
      $httpBackend.flush();
      return expect(operation).to.be.an["instanceof"](ChActionOp);
    });
    it('initializes collection action', function() {
      var operation;
      operation = $pm.$('products').$c('query');
      $httpBackend.flush();
      return expect(operation.$type).to.eq('collection');
    });
    it('initializes member action', function() {
      var operation;
      operation = $pm.$('products').$m('get');
      $httpBackend.flush();
      return expect(operation.$type).to.eq('member');
    });
    it('initializes collection action by default for collection has_many/HABTM association', function() {
      var operation;
      operation = $pm.$('products').$$('query');
      $httpBackend.flush();
      return expect(operation.$type).to.eq('collection');
    });
    return it('initializes member action by default for has_one/belongs_to association', function() {
      var operation;
      operation = $pm.$('affiliation').$$('get');
      $httpBackend.flush();
      return expect(operation.$type).to.eq('member');
    });
  });

}).call(this);
